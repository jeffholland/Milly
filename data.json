[{"date": "2022-12-06", "time": "04:57 PM", "text": "The default behavior of using the grid geometry manager is that columns will be as small as possible, so you don't need to do anything (assuming you're using grid properly).\n\n\n"}, {"date": "2022-12-06", "time": "04:57 PM", "text": "The behavior you describe where there is too much space between the elements is probably due to the fact you have other widgets in that same column which are wider. The column will default to the smallest width that will accomodate the widest item. That, or elsewhere in your code you give a non-zero weight to some of those columns that is causing them to expand.\n\n\n"}, {"date": "2022-12-06", "time": "04:58 PM", "text": "Before I talk about a solution, let me make sure it's clear that the way you're using grid to put more than one widget in the same cell is definitely the wrong way to do it. There's absolutely no reason to resort to such a solution. A general rule of thumb is that you should never put more than one widget in a cell.\n\n\n"}, {"date": "2022-12-06", "time": "04:58 PM", "text": "The simplest solution for you is to combine grid and pack. Put all of your checkbuttons in a frame and pack them on the left side of that frame. Then, put the frame in your grid with sticky=\"w\". Then, no matter how big the window gets, the checkbuttons will always be stuck to the left side of their containing frame.\n\n"}, {"date": "2022-12-06", "time": "04:58 PM", "text": "Note that this solution doesn't break the rule of thumb I mentioned earlier. You're only putting one widget in a cell: the frame. You can put whatever you want in that inner frame, but from the perspective of the grid there is only a single widget in each cell of the grid.\n\n"}, {"date": "2022-12-06", "time": "04:58 PM", "text": "Here is a working example base on python 2.7:\n"}]